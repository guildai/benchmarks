{"project": "guildai", "project_url": "http://guild.ai/", "show_commit_url": "#", "hash_length": 8, "revision_to_hash": {"2806": "08cb620f71988660561f060ce2b33221392883bb", "2900": "4c681ad2c2a3cbcdc7bdf906c18809ff1a62609b", "2923": "1cd0bb44ff6992a4a30f56051167c8c592dc876b", "2988": "38f2b4260bfd790fb0eb6a67978d722bf162e119", "3090": "a482d091102e0239656743a5690e1d43046b8169", "3191": "74a6fdfa8f171a1b54748920fb575384ecad9b42", "3416": "d14771532351c4efe8aa10e4db62253197cc4f98", "4327": "5715d9e0a271f84380d14978f3233f0660ccfe3b", "4342": "7b05fcf2d15602790f36231dec142efe143afb33", "4626": "eff196cc26e2a6aa294cb9f8fc2fd1272f71306d", "4815": "9ca3592a94189c894da5dcd811e2a08675d3219f", "5012": "567dc61cde71354556584996f6f1463a4c4548cc", "5086": "ebaab35387914d8d371d5b22e72072cb5715c3cb", "5225": "dd46242b828296a694a78ef32ac3d56a1d689dbf", "5290": "90c8b24542239b424ae4e70c87870b9880abd5c0", "5307": "d758ebadfe61cccd05d8bc9ebf5c211d32ff1e84", "5528": "26433dbebb65e213095b38ee5bf2aa4b7d36b30d", "5564": "8ced9db2108e3da7215b881e45278aea05de2f78", "5627": "212d274c7a2df44a272a9f1c36a66159c351d704", "5724": "ac5d79713c70eefe6a7ddbf153b4544140b8c538", "5753": "02a1310f0cc9dd2618faccd4da9af96c5d5f8931", "5755": "7987c31e7dd5b0582f683c664c482951bd8f65d5", "5756": "7fa7f9548efc3bc8e880b11d8309443959cc7fba"}, "revision_to_date": {"2806": 1553525916000, "2900": 1556463828000, "2923": 1557407138000, "2988": 1558299822000, "3090": 1560552340000, "3191": 1564062551000, "3416": 1568140196000, "4327": 1594663394000, "4342": 1595619374000, "4626": 1607038621000, "4815": 1610636572000, "5012": 1616709653000, "5086": 1632852085000, "5225": 1644249363000, "5290": 1648656629000, "5307": 1648755255000, "5528": 1651156166000, "5564": 1651592499000, "5627": 1652227886000, "5724": 1655768141000, "5753": 1656617070000, "5755": 1656631012000, "5756": 1656646302000}, "params": {"arch": ["x86_64"], "cpu": ["AMD Ryzen Threadripper 3970X 32-Core Processor"], "machine": ["beavis"], "num_cpu": ["64"], "os": ["Linux 5.15.0-39-generic"], "ram": ["131774568"], "python": ["3.8"], "tensorflow": ["", null], "branch": ["main"]}, "graph_param_list": [{"arch": "x86_64", "cpu": "AMD Ryzen Threadripper 3970X 32-Core Processor", "machine": "beavis", "num_cpu": "64", "os": "Linux 5.15.0-39-generic", "ram": "131774568", "python": "3.8", "branch": "main", "tensorflow": null}, {"arch": "x86_64", "cpu": "AMD Ryzen Threadripper 3970X 32-Core Processor", "machine": "beavis", "num_cpu": "64", "os": "Linux 5.15.0-39-generic", "ram": "131774568", "python": "3.8", "tensorflow": "", "branch": "main"}], "benchmarks": {"batch.TimeSuite.time_max_trials_greater_than_full": {"code": "class TimeSuite:\n    def time_max_trials_greater_than_full(self):\n        run_with_args([self.script, \"x=[1,2]\", \"y=[2,3]\", \"--max-trials\", \"5\"])\n\n    def setup(self):\n        self.script = os.path.join(os.getenv(\"ASV_BUILD_DIR\", \"\"), str(uuid.uuid4())+\".py\")\n        with open(self.script, \"w\") as f:\n            f.write(\"x=1\\n\")\n            f.write(\"y=2\\n\")\n            f.write(\"print(x+y)\\n\")", "min_run_count": 2, "name": "batch.TimeSuite.time_max_trials_greater_than_full", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "98a5b4dba95e213a58006898f952d6a5a9b0ae8d55ed494089dcfd9b991c6555", "warmup_time": -1}, "batch.TimeSuite.time_max_trials_less_than_full": {"code": "class TimeSuite:\n    def time_max_trials_less_than_full(self):\n        run_with_args([self.script, \"x=[1,2]\", \"y=[2,3]\", \"--max-trials\", \"3\"])\n\n    def setup(self):\n        self.script = os.path.join(os.getenv(\"ASV_BUILD_DIR\", \"\"), str(uuid.uuid4())+\".py\")\n        with open(self.script, \"w\") as f:\n            f.write(\"x=1\\n\")\n            f.write(\"y=2\\n\")\n            f.write(\"print(x+y)\\n\")", "min_run_count": 2, "name": "batch.TimeSuite.time_max_trials_less_than_full", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "7a01f12b5e425906fff6504d794fbef0adcda1c338ec2ecfab06d576bba4fc94", "warmup_time": -1}, "batch.TimeSuite.time_max_trials_optimizer_default_objective": {"code": "class TimeSuite:\n    def time_max_trials_optimizer_default_objective(self):\n        run_with_args([self.script, \"x=[1:100]\", \"-o\", \"gp\"])\n\n    def setup(self):\n        self.script = os.path.join(os.getenv(\"ASV_BUILD_DIR\", \"\"), str(uuid.uuid4())+\".py\")\n        with open(self.script, \"w\") as f:\n            f.write(\"x=1\\n\")\n            f.write(\"y=2\\n\")\n            f.write(\"print(x+y)\\n\")", "min_run_count": 2, "name": "batch.TimeSuite.time_max_trials_optimizer_default_objective", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "b296af166589047f2f5d45f48159ddd8e67ff7de69fa38dbd661afe6c542e120", "warmup_time": -1}, "batch.TimeSuite.time_max_trials_optimizer_explicit_objective": {"code": "class TimeSuite:\n    def time_max_trials_optimizer_explicit_objective(self):\n        run_with_args([self.script, \"x=[1:100]\", \"-o\", \"gbrt\", \"-X\", \"foo\", \"-m10\"])\n\n    def setup(self):\n        self.script = os.path.join(os.getenv(\"ASV_BUILD_DIR\", \"\"), str(uuid.uuid4())+\".py\")\n        with open(self.script, \"w\") as f:\n            f.write(\"x=1\\n\")\n            f.write(\"y=2\\n\")\n            f.write(\"print(x+y)\\n\")", "min_run_count": 2, "name": "batch.TimeSuite.time_max_trials_optimizer_explicit_objective", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "60dbd9289ddc622ccb24377e5bf1aa72f5ce8e02bbf9a761fa089aa3766eb399", "warmup_time": -1}, "batch.TimeSuite.time_max_trials_random_batch": {"code": "class TimeSuite:\n    def time_max_trials_random_batch(self):\n        run_with_args([self.script, \"x=[1:100]\", \"--max-trials\", \"5\"])\n\n    def setup(self):\n        self.script = os.path.join(os.getenv(\"ASV_BUILD_DIR\", \"\"), str(uuid.uuid4())+\".py\")\n        with open(self.script, \"w\") as f:\n            f.write(\"x=1\\n\")\n            f.write(\"y=2\\n\")\n            f.write(\"print(x+y)\\n\")", "min_run_count": 2, "name": "batch.TimeSuite.time_max_trials_random_batch", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "8218786d24815f9b975a59f481e4f416f0c7b4466027da0c8cac92204124090b", "warmup_time": -1}, "batch.TimeSuite.time_normal_batch": {"code": "class TimeSuite:\n    def time_normal_batch(self):\n        run_with_args([self.script, \"x=[1,2]\", \"y=[2,3]\"])\n\n    def setup(self):\n        self.script = os.path.join(os.getenv(\"ASV_BUILD_DIR\", \"\"), str(uuid.uuid4())+\".py\")\n        with open(self.script, \"w\") as f:\n            f.write(\"x=1\\n\")\n            f.write(\"y=2\\n\")\n            f.write(\"print(x+y)\\n\")", "min_run_count": 2, "name": "batch.TimeSuite.time_normal_batch", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "ddf8e24c064f3af7c599d6eadc41e5d81afa8927d975b50e220d13798abf890d", "warmup_time": -1}, "export_import.TimeSuite.time_export_with_copy": {"code": "class TimeSuite:\n    def time_export_with_copy(self):\n        command_with_args([\"export\", \"-y\", mkdtemp()])\n\n    def setup(self):\n        self.cwd = os.getcwd()\n        os.chdir(\n            os.path.join(os.getenv(\"ASV_ENV_DIR\", \"\"), \"project\", \"examples\", \"hello\")\n        )\n        seed_runs()\n        self.exported_dir_to_import = mkdtemp()\n        command_with_args([\"export\", \"-y\", self.exported_dir_to_import])", "min_run_count": 2, "name": "export_import.TimeSuite.time_export_with_copy", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "df5d9bb1b294bf363eed5448f4bdc8dd339e2decfeddea2820087938d26d681f", "warmup_time": -1}, "export_import.TimeSuite.time_export_with_move": {"code": "class TimeSuite:\n    def time_export_with_move(self):\n        try_cleanup()\n        # Not ideal at all here, but we need to make sure that when executing multiple runs here,\n        # we don't move the runs the first time and then do nothing subsequent times.\n        seed_runs()\n        command_with_args([\"export\", \"-y\", \"--move\", mkdtemp()])\n\n    def setup(self):\n        self.cwd = os.getcwd()\n        os.chdir(\n            os.path.join(os.getenv(\"ASV_ENV_DIR\", \"\"), \"project\", \"examples\", \"hello\")\n        )\n        seed_runs()\n        self.exported_dir_to_import = mkdtemp()\n        command_with_args([\"export\", \"-y\", self.exported_dir_to_import])", "min_run_count": 2, "name": "export_import.TimeSuite.time_export_with_move", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "2b9102c454a7f97fbf6f30c22ad02b5cc53e93b1be7a97b383a59afa099af1f7", "warmup_time": -1}, "export_import.TimeSuite.time_import_with_copy": {"code": "class TimeSuite:\n    def time_import_with_copy(self):\n        # would be nice to omit this, but otherwise setup only runs once and we perform multiple\n        # iterations of the import. As a result, we only do the work on the first iteration.\n        try_cleanup()\n        command_with_args([\"import\", \"-y\", self.exported_dir_to_import])\n\n    def setup(self):\n        self.cwd = os.getcwd()\n        os.chdir(\n            os.path.join(os.getenv(\"ASV_ENV_DIR\", \"\"), \"project\", \"examples\", \"hello\")\n        )\n        seed_runs()\n        self.exported_dir_to_import = mkdtemp()\n        command_with_args([\"export\", \"-y\", self.exported_dir_to_import])", "min_run_count": 2, "name": "export_import.TimeSuite.time_import_with_copy", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "0835e181ee7514ee2f087f0175dd61a706dba37934a130ba2e64600095f5f7fd", "warmup_time": -1}, "export_import.TimeSuite.time_import_with_move": {"code": "class TimeSuite:\n    def time_import_with_move(self):\n        # would be nice to omit this, but otherwise setup only runs once and we perform multiple\n        # iterations of the import. As a result, we only do the work on the first iteration.\n        try_cleanup()\n        backup_dir = os.path.join(mkdtemp(), \"dummy\")\n        # Not ideal at all here, but we need to make sure that when executing multiple runs here,\n        # we don't move the runs the first time and then do nothing subsequent times.\n        shutil.copytree(self.exported_dir_to_import, backup_dir)\n        command_with_args([\"import\", \"-y\", \"--move\", backup_dir])\n\n    def setup(self):\n        self.cwd = os.getcwd()\n        os.chdir(\n            os.path.join(os.getenv(\"ASV_ENV_DIR\", \"\"), \"project\", \"examples\", \"hello\")\n        )\n        seed_runs()\n        self.exported_dir_to_import = mkdtemp()\n        command_with_args([\"export\", \"-y\", self.exported_dir_to_import])", "min_run_count": 2, "name": "export_import.TimeSuite.time_import_with_move", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "88ea8a3a8f66f78e153508ecc32f0950c0e3c8af088c250dc9363fe30bdcf417", "warmup_time": -1}, "lock.TimeSuite.time_acquire": {"code": "class TimeSuite:\n    def time_acquire(self):\n        self.unlocked_lock.acquire()\n\n    def setup(self):\n        self.lock_dir = mkdtemp()\n        self.unlocked_lock = lock.Lock(\"unlocked\", timeout=1, guild_home=self.lock_dir)\n        self.locked_lock = lock.Lock(\"locked\", timeout=1, guild_home=self.lock_dir)\n        self.locked_lock.acquire()", "min_run_count": 2, "name": "lock.TimeSuite.time_acquire", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "bc585832cffa45b7ac267df5a09d594b765f0d174a27c54bd812cd7dbe6f253c", "warmup_time": -1}, "lock.TimeSuite.time_acquire_conflict": {"code": "class TimeSuite:\n    def time_acquire_conflict(self):\n        self.locked_lock.acquire()\n\n    def setup(self):\n        self.lock_dir = mkdtemp()\n        self.unlocked_lock = lock.Lock(\"unlocked\", timeout=1, guild_home=self.lock_dir)\n        self.locked_lock = lock.Lock(\"locked\", timeout=1, guild_home=self.lock_dir)\n        self.locked_lock.acquire()", "min_run_count": 2, "name": "lock.TimeSuite.time_acquire_conflict", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "eb5ca4d59f8d43723c21834989ab3b5a4eb5a22368b7d0c634a33b4d8c537b0a", "warmup_time": -1}, "lock.TimeSuite.time_create": {"code": "class TimeSuite:\n    def time_create(self):\n        l = lock.Lock(\"new_lock\", timeout=1, guild_home=self.lock_dir)\n\n    def setup(self):\n        self.lock_dir = mkdtemp()\n        self.unlocked_lock = lock.Lock(\"unlocked\", timeout=1, guild_home=self.lock_dir)\n        self.locked_lock = lock.Lock(\"locked\", timeout=1, guild_home=self.lock_dir)\n        self.locked_lock.acquire()", "min_run_count": 2, "name": "lock.TimeSuite.time_create", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "ebed3c58ef654215f747391dfb70096ab58a1b9c834ecc84bd6321b2573081b8", "warmup_time": -1}, "lock.TimeSuite.time_release": {"code": "class TimeSuite:\n    def time_release(self):\n        self.locked_lock.release()\n\n    def setup(self):\n        self.lock_dir = mkdtemp()\n        self.unlocked_lock = lock.Lock(\"unlocked\", timeout=1, guild_home=self.lock_dir)\n        self.locked_lock = lock.Lock(\"locked\", timeout=1, guild_home=self.lock_dir)\n        self.locked_lock.acquire()", "min_run_count": 2, "name": "lock.TimeSuite.time_release", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "b4f5f9c468008b040dca45dec2bbee54c452be4f2a696464d2d19ece154d681c", "warmup_time": -1}, "stage_deps.TimeSuite.time_downstream_op": {"code": "class TimeSuite:\n    def time_downstream_op(self):\n        run_with_args([\"file-op\", \"--stage\"])\n\n    def setup(self):\n        self.cwd = os.getcwd()\n        os.chdir(\n            os.path.join(\n                os.getenv(\"ASV_ENV_DIR\", \"\"), \"project\", \"examples\", \"dependencies\"\n            )\n        )", "min_run_count": 2, "name": "stage_deps.TimeSuite.time_downstream_op", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "5b8e233140e51f8a9973dc75e28ac251ebf0d91ec9826eaf28bc64a92d835714", "warmup_time": -1}, "stage_deps.TimeSuite.time_missing_op": {"code": "class TimeSuite:\n    def time_missing_op(self):\n        try:\n            run_with_args([\"file-op\"])\n        except SystemExit:\n            print(\"Missing op - skipping exception\")\n\n    def setup(self):\n        self.cwd = os.getcwd()\n        os.chdir(\n            os.path.join(\n                os.getenv(\"ASV_ENV_DIR\", \"\"), \"project\", \"examples\", \"dependencies\"\n            )\n        )", "min_run_count": 2, "name": "stage_deps.TimeSuite.time_missing_op", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "a0c401737d65a22c27b485c1b71677ef16f3581e05a222535d71984244154589", "warmup_time": -1}, "stage_deps.TimeSuite.time_stage_required_op": {"code": "class TimeSuite:\n    def time_stage_required_op(self):\n        run_with_args([\"file\", \"--stage\", \"-y\"])\n\n    def setup(self):\n        self.cwd = os.getcwd()\n        os.chdir(\n            os.path.join(\n                os.getenv(\"ASV_ENV_DIR\", \"\"), \"project\", \"examples\", \"dependencies\"\n            )\n        )", "min_run_count": 2, "name": "stage_deps.TimeSuite.time_stage_required_op", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "361e063e92ed31ef9b87f0da1fdd86ce287ba564f612bc820263039ea4996326", "warmup_time": -1}, "stage_deps.TimeSuite.time_staged_run_selected": {"code": "class TimeSuite:\n    def time_staged_run_selected(self):\n        run_with_args([\"file-op\"])\n\n    def setup(self):\n        self.cwd = os.getcwd()\n        os.chdir(\n            os.path.join(\n                os.getenv(\"ASV_ENV_DIR\", \"\"), \"project\", \"examples\", \"dependencies\"\n            )\n        )", "min_run_count": 2, "name": "stage_deps.TimeSuite.time_staged_run_selected", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "7201835c411a210fe96956e143849387d436fcb45f22ebb70d5c5c5583d58638", "warmup_time": -1}}, "machines": {"beavis": {"arch": "x86_64", "cpu": "AMD Ryzen Threadripper 3970X 32-Core Processor", "machine": "beavis", "num_cpu": "64", "os": "Linux 5.15.0-39-generic", "ram": "131774568", "version": 1}}, "tags": {"0.6.0": 2806, "0.6.1": 2900, "0.6.2": 2923, "0.6.3": 2988, "0.6.4": 3090, "0.6.5": 3191, "0.6.6": 3416, "0.7.0": 4327, "0.7.0.post1": 4342, "0.7.1": 4626, "0.7.2": 4815, "0.7.3": 5012, "0.7.4": 5086, "0.7.5": 5225, "0.8.0": 5307, "0.8.0.rc2": 5290, "0.8.1": 5627, "0.8.1.dev1": 5528, "0.8.1.dev2": 5564}, "pages": [["", "Grid view", "Display as a agrid"], ["summarylist", "List view", "Display as a list"], ["regressions", "Show regressions", "Display information about recent regressions"]]}