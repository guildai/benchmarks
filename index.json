{"project": "guildai", "project_url": "http://guild.ai/", "show_commit_url": "#", "hash_length": 8, "revision_to_hash": {"2806": "08cb620f71988660561f060ce2b33221392883bb", "2900": "4c681ad2c2a3cbcdc7bdf906c18809ff1a62609b", "2923": "1cd0bb44ff6992a4a30f56051167c8c592dc876b", "2988": "38f2b4260bfd790fb0eb6a67978d722bf162e119", "3090": "a482d091102e0239656743a5690e1d43046b8169", "3191": "74a6fdfa8f171a1b54748920fb575384ecad9b42", "3416": "d14771532351c4efe8aa10e4db62253197cc4f98", "4327": "5715d9e0a271f84380d14978f3233f0660ccfe3b", "4342": "7b05fcf2d15602790f36231dec142efe143afb33", "4626": "eff196cc26e2a6aa294cb9f8fc2fd1272f71306d", "4815": "9ca3592a94189c894da5dcd811e2a08675d3219f", "5012": "567dc61cde71354556584996f6f1463a4c4548cc", "5086": "ebaab35387914d8d371d5b22e72072cb5715c3cb", "5225": "dd46242b828296a694a78ef32ac3d56a1d689dbf", "5232": "fda82345341812204451dc486318612b63c55647", "5255": "7b26fbfbb00b9654f1d0fe956e203296ee1fb061", "5261": "bc4dbbcc8211f13bb0550582e775ea85b7f7daa3", "5265": "d46ddc75cbc58987b8157b0aae68374e5690aa39", "5276": "e5b9960f04090c735131be7e631daeaeb9782700", "5290": "90c8b24542239b424ae4e70c87870b9880abd5c0", "5294": "177e220c7439ecd3c42afafeb2a3023590d698ea", "5307": "d758ebadfe61cccd05d8bc9ebf5c211d32ff1e84", "5311": "a8535487617558a77cda6f12b671376562dfda8b", "5321": "da10b0afb0de3b6a9973a819510f32959724b4b6", "5325": "24c0fc88531532e0ee5d966246ab6b39651d1999", "5330": "09848aa940dc63f82fda00fc538a16de08f19f1a", "5334": "a126e154bc6d89520f331adbd7e9f4a0c8c21a07", "5338": "ec3b90e396bcf184564922ec6d4c93841c434ef3", "5389": "3e7686710b89ad4f46ab3b4709b758542dd33cd9", "5465": "89fa3be9f3bbe91b897a542471ae8eae2495f016", "5472": "1b68e8e64195869d604d54cbe55bd78ff294b265", "5483": "0e04cc4d12b1a7460a6027803808a0864c24d454", "5487": "26845eca121d15ef06949d0269e9ff0c391b214a", "5491": "f6d7fecaae2692a7f78c2c8b47f9c058dba2ea66", "5519": "92dd39e72149613d61876ec678c7ae056eb3ccda", "5525": "fde069abb37979e5026ceec2049ddf16a2a461a7", "5528": "26433dbebb65e213095b38ee5bf2aa4b7d36b30d", "5529": "26ebd01d3e49f9550124d43b4a3e59c844f0acd8", "5533": "f148160b5ca5c3961732218b64fd18f5881ec06a", "5546": "61ab816764caf11a6f5c6c20daf7384250e07a2e", "5556": "5f4a036b2964a4c0211a8786b0d092b7c1ce3622", "5560": "761933189f2c93aa1aea23f3692d04b98c5c31e8", "5564": "8ced9db2108e3da7215b881e45278aea05de2f78", "5574": "c83943c685b98253dd63a4232e68d0c74df42a85", "5591": "cbfe9bf2cea3e00fb3838adec05b7269e64f1ba1", "5603": "8455b506e262579be66bd991a9fd8a5bdec32521", "5607": "ee26303b39a4b81f5a44c6ab9bc1af328452c25e", "5611": "d6879d663a7f4d6ba54c32ebbde1575d9258db18", "5616": "5d9b2b19295a9cb9ff12aa5c0ad10e123825131c", "5620": "62b215db1c3e8833ad2a22d55c40430ba9a55eeb", "5624": "499a066e0918493d814464ff719421f4e9360009", "5627": "212d274c7a2df44a272a9f1c36a66159c351d704", "5630": "2e0f4ea69e264d441cb848cec1b16d5e99a4e070", "5640": "76fca4340edcc5e6e77bd794fa218d04706d3d8a", "5645": "a42c9719b0ca255f7a5038e6ae231c97e97e95ac", "5673": "e19d4de681ef1e4e535854b37c1f73f1a5f3085c", "5681": "d3db493fb7a4952a334684e36578dd4b18afa124", "5690": "6448edf7f80db41be8097c6d8a61cd23130058c1", "5699": "649cb33e94f52b47099a2223481c3878fb3a72de", "5703": "077ed7aae37a387cac08086b582c5106b49b66cc", "5707": "ab77c7c43825aae5edde74a17ad6cc9fec69b37b", "5711": "0a557d816869a3b28a7264ba8bd06c0c797ac198", "5715": "cfefb636a82b7d8b70189b8bbd03ae56218331bc", "5720": "91a95e5dc5af5ffa59c143299644deb836ec50d8", "5724": "ac5d79713c70eefe6a7ddbf153b4544140b8c538", "5753": "02a1310f0cc9dd2618faccd4da9af96c5d5f8931", "5755": "7987c31e7dd5b0582f683c664c482951bd8f65d5", "5756": "7fa7f9548efc3bc8e880b11d8309443959cc7fba", "5804": "8af5f335c95e35cdaf8872e623e0016a9a03e8df", "5809": "37a9816ebbe469527c3462e0344a1d99d184158f", "5810": "d0a4d41d2ed5d5b06bc56c6d702bea556d090772"}, "revision_to_date": {"2806": 1553525916000, "2900": 1556463828000, "2923": 1557407138000, "2988": 1558299822000, "3090": 1560552340000, "3191": 1564062551000, "3416": 1568140196000, "4327": 1594663394000, "4342": 1595619374000, "4626": 1607038621000, "4815": 1610636572000, "5012": 1616709653000, "5086": 1632852085000, "5225": 1644249363000, "5232": 1646664798000, "5255": 1648223344000, "5261": 1648225376000, "5265": 1648228933000, "5276": 1648559970000, "5290": 1648656629000, "5294": 1648747771000, "5307": 1648755255000, "5311": 1648656629000, "5321": 1649435173000, "5325": 1649440434000, "5330": 1649689566000, "5334": 1649693455000, "5338": 1649701769000, "5389": 1649778883000, "5465": 1650400765000, "5472": 1650559970000, "5483": 1650918377000, "5487": 1650918681000, "5491": 1651005979000, "5519": 1651083219000, "5525": 1651154877000, "5528": 1651156166000, "5529": 1651172199000, "5533": 1651177502000, "5546": 1651512696000, "5556": 1651520494000, "5560": 1651590169000, "5564": 1651592499000, "5574": 1651671282000, "5591": 1651752441000, "5603": 1652125156000, "5607": 1652129934000, "5611": 1652139598000, "5616": 1652154505000, "5620": 1652154607000, "5624": 1652226937000, "5627": 1652227886000, "5630": 1652374425000, "5640": 1652381206000, "5645": 1652462551000, "5673": 1653490160000, "5681": 1653588514000, "5690": 1654445312000, "5699": 1654810766000, "5703": 1654876929000, "5707": 1654880949000, "5711": 1654886969000, "5715": 1654898547000, "5720": 1655210836000, "5724": 1655768141000, "5753": 1656617070000, "5755": 1656631012000, "5756": 1656646302000, "5804": 1656716689000, "5809": 1656780653000, "5810": 1657038457000}, "params": {"arch": ["x86_64"], "cpu": ["AMD Ryzen Threadripper 3970X 32-Core Processor"], "machine": ["beavis"], "num_cpu": ["64"], "os": ["Linux 5.15.0-39-generic"], "ram": ["131774568"], "python": ["3.8"], "tensorflow": ["", null], "branch": ["main"]}, "graph_param_list": [{"arch": "x86_64", "cpu": "AMD Ryzen Threadripper 3970X 32-Core Processor", "machine": "beavis", "num_cpu": "64", "os": "Linux 5.15.0-39-generic", "ram": "131774568", "python": "3.8", "tensorflow": "", "branch": "main"}, {"arch": "x86_64", "cpu": "AMD Ryzen Threadripper 3970X 32-Core Processor", "machine": "beavis", "num_cpu": "64", "os": "Linux 5.15.0-39-generic", "ram": "131774568", "python": "3.8", "branch": "main", "tensorflow": null}], "benchmarks": {"batch.TimeSuite.time_max_trials_greater_than_full": {"code": "class TimeSuite:\n    def time_max_trials_greater_than_full(self):\n        run_with_args([self.script, \"-y\", \"x=[1,2]\", \"y=[2,3]\", \"--max-trials\", \"5\"])\n\n    def setup(self):\n        self.script = os.path.join(os.getenv(\"ASV_BUILD_DIR\", \"\"), str(uuid.uuid4())+\".py\")\n        with open(self.script, \"w\") as f:\n            f.write(\"x=1\\n\")\n            f.write(\"y=2\\n\")\n            f.write(\"print(x+y)\\n\")", "min_run_count": 2, "name": "batch.TimeSuite.time_max_trials_greater_than_full", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "8d33beb482e7208a4b65efe3ef7cf0f3394cdba5f0b5e034669d7d1610e6028a", "warmup_time": -1}, "batch.TimeSuite.time_max_trials_less_than_full": {"code": "class TimeSuite:\n    def time_max_trials_less_than_full(self):\n        run_with_args([self.script, \"-y\", \"x=[1,2]\", \"y=[2,3]\", \"--max-trials\", \"3\"])\n\n    def setup(self):\n        self.script = os.path.join(os.getenv(\"ASV_BUILD_DIR\", \"\"), str(uuid.uuid4())+\".py\")\n        with open(self.script, \"w\") as f:\n            f.write(\"x=1\\n\")\n            f.write(\"y=2\\n\")\n            f.write(\"print(x+y)\\n\")", "min_run_count": 2, "name": "batch.TimeSuite.time_max_trials_less_than_full", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "53108049f670675fa173d5cbb605f6fdb667ade640b5a26b1a9c0ae7ae3b73c2", "warmup_time": -1}, "batch.TimeSuite.time_max_trials_optimizer_default_objective": {"code": "class TimeSuite:\n    def time_max_trials_optimizer_default_objective(self):\n        run_with_args([self.script, \"-y\", \"x=[1:100]\", \"-o\", \"gp\"])\n\n    def setup(self):\n        self.script = os.path.join(os.getenv(\"ASV_BUILD_DIR\", \"\"), str(uuid.uuid4())+\".py\")\n        with open(self.script, \"w\") as f:\n            f.write(\"x=1\\n\")\n            f.write(\"y=2\\n\")\n            f.write(\"print(x+y)\\n\")", "min_run_count": 2, "name": "batch.TimeSuite.time_max_trials_optimizer_default_objective", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "d7db02117400eda406f774630ee132f0a190f5b436c989932f24fdc7832e9ad3", "warmup_time": -1}, "batch.TimeSuite.time_max_trials_optimizer_explicit_objective": {"code": "class TimeSuite:\n    def time_max_trials_optimizer_explicit_objective(self):\n        run_with_args([self.script, \"-y\", \"x=[1:100]\", \"-o\", \"gbrt\", \"-X\", \"foo\", \"-m10\"])\n\n    def setup(self):\n        self.script = os.path.join(os.getenv(\"ASV_BUILD_DIR\", \"\"), str(uuid.uuid4())+\".py\")\n        with open(self.script, \"w\") as f:\n            f.write(\"x=1\\n\")\n            f.write(\"y=2\\n\")\n            f.write(\"print(x+y)\\n\")", "min_run_count": 2, "name": "batch.TimeSuite.time_max_trials_optimizer_explicit_objective", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "a6eb4988de1ef120c1cf47367e69b46394a2b729a64d8ed5cdf52205461433f5", "warmup_time": -1}, "batch.TimeSuite.time_max_trials_random_batch": {"code": "class TimeSuite:\n    def time_max_trials_random_batch(self):\n        run_with_args([self.script, \"-y\", \"x=[1:100]\", \"--max-trials\", \"5\"])\n\n    def setup(self):\n        self.script = os.path.join(os.getenv(\"ASV_BUILD_DIR\", \"\"), str(uuid.uuid4())+\".py\")\n        with open(self.script, \"w\") as f:\n            f.write(\"x=1\\n\")\n            f.write(\"y=2\\n\")\n            f.write(\"print(x+y)\\n\")", "min_run_count": 2, "name": "batch.TimeSuite.time_max_trials_random_batch", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "d5792b800a40781ca1915eaec9d8fd74533b3ea4dac7ac49721549aaba38251e", "warmup_time": -1}, "batch.TimeSuite.time_normal_batch": {"code": "class TimeSuite:\n    def time_normal_batch(self):\n        run_with_args([self.script, \"-y\", \"x=[1,2]\", \"y=[2,3]\"])\n\n    def setup(self):\n        self.script = os.path.join(os.getenv(\"ASV_BUILD_DIR\", \"\"), str(uuid.uuid4())+\".py\")\n        with open(self.script, \"w\") as f:\n            f.write(\"x=1\\n\")\n            f.write(\"y=2\\n\")\n            f.write(\"print(x+y)\\n\")", "min_run_count": 2, "name": "batch.TimeSuite.time_normal_batch", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "4facc6e122e1a2c3e584d348b8346efb8dda4fc93536ac801227c41822288699", "warmup_time": -1}, "export_import.TimeSuite.time_export_with_copy": {"code": "class TimeSuite:\n    def time_export_with_copy(self):\n        command_with_args([\"export\", \"-y\", mkdtemp()])\n\n    def setup(self):\n        self.cwd = os.getcwd()\n        os.chdir(\n            os.path.join(os.getenv(\"ASV_ENV_DIR\", \"\"), \"project\", \"examples\", \"hello\")\n        )\n        seed_runs()\n        self.exported_dir_to_import = mkdtemp()\n        command_with_args([\"export\", \"-y\", self.exported_dir_to_import])", "min_run_count": 2, "name": "export_import.TimeSuite.time_export_with_copy", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "df5d9bb1b294bf363eed5448f4bdc8dd339e2decfeddea2820087938d26d681f", "warmup_time": -1}, "export_import.TimeSuite.time_export_with_move": {"code": "class TimeSuite:\n    def time_export_with_move(self):\n        try_cleanup()\n        # Not ideal at all here, but we need to make sure that when executing multiple runs here,\n        # we don't move the runs the first time and then do nothing subsequent times.\n        seed_runs()\n        command_with_args([\"export\", \"-y\", \"--move\", mkdtemp()])\n\n    def setup(self):\n        self.cwd = os.getcwd()\n        os.chdir(\n            os.path.join(os.getenv(\"ASV_ENV_DIR\", \"\"), \"project\", \"examples\", \"hello\")\n        )\n        seed_runs()\n        self.exported_dir_to_import = mkdtemp()\n        command_with_args([\"export\", \"-y\", self.exported_dir_to_import])", "min_run_count": 2, "name": "export_import.TimeSuite.time_export_with_move", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "2b9102c454a7f97fbf6f30c22ad02b5cc53e93b1be7a97b383a59afa099af1f7", "warmup_time": -1}, "export_import.TimeSuite.time_import_with_copy": {"code": "class TimeSuite:\n    def time_import_with_copy(self):\n        # would be nice to omit this, but otherwise setup only runs once and we perform multiple\n        # iterations of the import. As a result, we only do the work on the first iteration.\n        try_cleanup()\n        command_with_args([\"import\", \"-y\", self.exported_dir_to_import])\n\n    def setup(self):\n        self.cwd = os.getcwd()\n        os.chdir(\n            os.path.join(os.getenv(\"ASV_ENV_DIR\", \"\"), \"project\", \"examples\", \"hello\")\n        )\n        seed_runs()\n        self.exported_dir_to_import = mkdtemp()\n        command_with_args([\"export\", \"-y\", self.exported_dir_to_import])", "min_run_count": 2, "name": "export_import.TimeSuite.time_import_with_copy", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "0835e181ee7514ee2f087f0175dd61a706dba37934a130ba2e64600095f5f7fd", "warmup_time": -1}, "export_import.TimeSuite.time_import_with_move": {"code": "class TimeSuite:\n    def time_import_with_move(self):\n        # would be nice to omit this, but otherwise setup only runs once and we perform multiple\n        # iterations of the import. As a result, we only do the work on the first iteration.\n        try_cleanup()\n        backup_dir = os.path.join(mkdtemp(), \"dummy\")\n        # Not ideal at all here, but we need to make sure that when executing multiple runs here,\n        # we don't move the runs the first time and then do nothing subsequent times.\n        shutil.copytree(self.exported_dir_to_import, backup_dir)\n        command_with_args([\"import\", \"-y\", \"--move\", backup_dir])\n\n    def setup(self):\n        self.cwd = os.getcwd()\n        os.chdir(\n            os.path.join(os.getenv(\"ASV_ENV_DIR\", \"\"), \"project\", \"examples\", \"hello\")\n        )\n        seed_runs()\n        self.exported_dir_to_import = mkdtemp()\n        command_with_args([\"export\", \"-y\", self.exported_dir_to_import])", "min_run_count": 2, "name": "export_import.TimeSuite.time_import_with_move", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "88ea8a3a8f66f78e153508ecc32f0950c0e3c8af088c250dc9363fe30bdcf417", "warmup_time": -1}, "lock.TimeSuite.time_acquire": {"code": "class TimeSuite:\n    def time_acquire(self):\n        self.unlocked_lock.acquire()\n\n    def setup(self):\n        self.lock_dir = mkdtemp()\n        self.unlocked_lock = lock.Lock(\"unlocked\", timeout=1, guild_home=self.lock_dir)\n        self.locked_lock = lock.Lock(\"locked\", timeout=1, guild_home=self.lock_dir)\n        self.locked_lock.acquire()", "min_run_count": 2, "name": "lock.TimeSuite.time_acquire", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "bc585832cffa45b7ac267df5a09d594b765f0d174a27c54bd812cd7dbe6f253c", "warmup_time": -1}, "lock.TimeSuite.time_acquire_conflict": {"code": "class TimeSuite:\n    def time_acquire_conflict(self):\n        self.locked_lock.acquire()\n\n    def setup(self):\n        self.lock_dir = mkdtemp()\n        self.unlocked_lock = lock.Lock(\"unlocked\", timeout=1, guild_home=self.lock_dir)\n        self.locked_lock = lock.Lock(\"locked\", timeout=1, guild_home=self.lock_dir)\n        self.locked_lock.acquire()", "min_run_count": 2, "name": "lock.TimeSuite.time_acquire_conflict", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "eb5ca4d59f8d43723c21834989ab3b5a4eb5a22368b7d0c634a33b4d8c537b0a", "warmup_time": -1}, "lock.TimeSuite.time_create": {"code": "class TimeSuite:\n    def time_create(self):\n        l = lock.Lock(\"new_lock\", timeout=1, guild_home=self.lock_dir)\n\n    def setup(self):\n        self.lock_dir = mkdtemp()\n        self.unlocked_lock = lock.Lock(\"unlocked\", timeout=1, guild_home=self.lock_dir)\n        self.locked_lock = lock.Lock(\"locked\", timeout=1, guild_home=self.lock_dir)\n        self.locked_lock.acquire()", "min_run_count": 2, "name": "lock.TimeSuite.time_create", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "ebed3c58ef654215f747391dfb70096ab58a1b9c834ecc84bd6321b2573081b8", "warmup_time": -1}, "lock.TimeSuite.time_release": {"code": "class TimeSuite:\n    def time_release(self):\n        self.locked_lock.release()\n\n    def setup(self):\n        self.lock_dir = mkdtemp()\n        self.unlocked_lock = lock.Lock(\"unlocked\", timeout=1, guild_home=self.lock_dir)\n        self.locked_lock = lock.Lock(\"locked\", timeout=1, guild_home=self.lock_dir)\n        self.locked_lock.acquire()", "min_run_count": 2, "name": "lock.TimeSuite.time_release", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "b4f5f9c468008b040dca45dec2bbee54c452be4f2a696464d2d19ece154d681c", "warmup_time": -1}, "stage_deps.TimeSuite.time_downstream_op": {"code": "class TimeSuite:\n    def time_downstream_op(self):\n        run_with_args([\"file-op\", \"--stage\", \"-y\"])\n\n    def setup(self):\n        self.cwd = os.getcwd()\n        os.chdir(\n            os.path.join(\n                os.getenv(\"ASV_ENV_DIR\", \"\"), \"project\", \"examples\", \"dependencies\"\n            )\n        )", "min_run_count": 2, "name": "stage_deps.TimeSuite.time_downstream_op", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "6ce957b21f9bd0320d800a76d8948ff0fafb1a12ceda93125bfce1db90827ba1", "warmup_time": -1}, "stage_deps.TimeSuite.time_missing_op": {"code": "class TimeSuite:\n    def time_missing_op(self):\n        try:\n            run_with_args([\"file-op\"])\n        except SystemExit:\n            print(\"Missing op - skipping exception\")\n\n    def setup(self):\n        self.cwd = os.getcwd()\n        os.chdir(\n            os.path.join(\n                os.getenv(\"ASV_ENV_DIR\", \"\"), \"project\", \"examples\", \"dependencies\"\n            )\n        )", "min_run_count": 2, "name": "stage_deps.TimeSuite.time_missing_op", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "a0c401737d65a22c27b485c1b71677ef16f3581e05a222535d71984244154589", "warmup_time": -1}, "stage_deps.TimeSuite.time_stage_required_op": {"code": "class TimeSuite:\n    def time_stage_required_op(self):\n        run_with_args([\"file\", \"--stage\", \"-y\"])\n\n    def setup(self):\n        self.cwd = os.getcwd()\n        os.chdir(\n            os.path.join(\n                os.getenv(\"ASV_ENV_DIR\", \"\"), \"project\", \"examples\", \"dependencies\"\n            )\n        )", "min_run_count": 2, "name": "stage_deps.TimeSuite.time_stage_required_op", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "361e063e92ed31ef9b87f0da1fdd86ce287ba564f612bc820263039ea4996326", "warmup_time": -1}}, "machines": {"beavis": {"arch": "x86_64", "cpu": "AMD Ryzen Threadripper 3970X 32-Core Processor", "machine": "beavis", "num_cpu": "64", "os": "Linux 5.15.0-39-generic", "ram": "131774568", "version": 1}}, "tags": {"0.6.0": 2806, "0.6.1": 2900, "0.6.2": 2923, "0.6.3": 2988, "0.6.4": 3090, "0.6.5": 3191, "0.6.6": 3416, "0.7.0": 4327, "0.7.0.post1": 4342, "0.7.1": 4626, "0.7.2": 4815, "0.7.3": 5012, "0.7.4": 5086, "0.7.5": 5225, "0.8.0": 5307, "0.8.0.rc2": 5290, "0.8.1": 5627, "0.8.1.dev1": 5528, "0.8.1.dev2": 5564}, "pages": [["", "Grid view", "Display as a agrid"], ["summarylist", "List view", "Display as a list"], ["regressions", "Show regressions", "Display information about recent regressions"]]}